---
title: "Lab 2: Julia Quickstart"
subtitle: "Functions, Logic, and Packages"
author: "Catherine Jackson (ccj3)" 
date: 2024-01-19
week: 2
categories: [Lab]

# code to use
jupyter: julia-1.10

# execution options
execute:
  freeze: auto  
  #cache: true

format: 
    html:
        theme: spacelab
        copy-code: true
        code-overflow: wrap
        toc: true
        anchor-sections: true
        callout-appearance: simple
        reference-location: document
        citations-hover: true
        code-annotations: hover
        code-line-numbers: true
        html-math-method: katex

    # I AM GETTING WEIRD ISSUES WHEN RENDERING TO PDF
    # THAT I DO NOT WANT TO INFLICT ON YOU
    # HOPE TO TROUBLESHOOT SOON, FOR NOW USE DOCX
    # PLEASE EXPLORE https://quarto.org/docs/reference/formats/docx.html
    # FOR WAYS TO MAKE THE OUTPUT MORE ATTRACTIVE!

    docx: 
        toc: true
        fig-format: png
        number-sections: true
        code-line-numbers: true

date-format: "ddd., MMM. D"
---

## First steps

We start by loading the packages we will use in this lab

```{julia}
using CSV
using DataFrames
using DataFramesMeta
using Dates
using Plots
using StatsBase: mean
using StatsPlots
using Unitful
```

## Defining Lab Functions

```{julia}
#| output: false
get_fname(year::Int) = "data/tidesandcurrents-8638610-$(year)-NAVD-GMT-metric.csv"
```

```{julia}
function read_tides(year::Int)
    fname = get_fname(year)
    date_format = "yyyy-mm-dd HH:MM"
    df = CSV.read(fname, DataFrame); 
    date_format = "yyyy-mm-dd HH:MM";
    df = CSV.read(fname, DataFrame; dateformat=date_format)
    df[!, " Water Level"] .*= 1u"m";
    df = @rename(df, :datetime = $"Date Time", :lsl = $" Water Level");
    df = @select(df, :datetime, :lsl)
    return(df)
end
```

## Building the dataset

The two functions above let us (1) read in data from any of the files we have in this project repository and (2) take the data from this file and convert it into a dataframe with columns :datetime and :lsl with datetime following a specific date format and lsl in units of meters.

However, this function is written to take in only one file (or one year, equivalently) at a time.  We can vectorize the function, menaing we can apply it to every element in a vector.  This allows us to input a vector of all the years for which data was collected to create our dataset.

However, taking in this vector means the output is a vector of Datasets.  However, we can use vcat to put it all together!

```{julia}
years = 1928:2021;
annual_data = read_tides.(years);
typeof(annual_data);
df = vcat(annual_data...);
```

Finally, we'll make sure we drop any missing data.

```{julia}
dropmissing!(df);
```

## Plots

1. Plot the hourly water levels for March 2020, using subsetting and plotting techniques from the instructions

Here, I use t_start to define the beginning of our period of interest, March 1st.  I use t_end to define the end of our period of interest, March 31st.  I then use the @subset function to subset the dataframe to only include rows where the datetime is between t_start and t_end.  Finally, I plot the datetime on the x-axis and the lsl on the y-axis.

```{julia}
t_start = Dates.DateTime(2020, 3, 1, 0) 
t_end = Dates.DateTime(2020, 3, 31, 23)
df_month = @subset(df, t_start .<= :datetime .<= t_end)
plot(
    df_month.datetime,
    df_month.lsl;
    title="Water levels at Sewells Point, VA in March 2020",
    ylabel="Water level", 
    label=false, 
)
```

1. In the instructions, we plotted the average monthly water level from each month using `groupby`. Repeat this analysis, using the full dataset (all years). 

The code below first takes advantage of the fact that the datetime column is written in a date format and creates a new column called month that is the month of each observation.  It then drops any missing values from the dataset.  Finally, it groups the data by month and calculates the mean of the lsl column for each month.  The general syntax is `combine(grouped_df, :column => function => :newcolumn)`.

```{julia}
df[!, :month] = Dates.month.(df.datetime) 
dropmissing!(df, :lsl) 
df_bymonth = groupby(df, :month) 
df_climatology = combine(df_bymonth, :lsl => mean => :lsl_avg); 
plot(
    df_climatology.month, # <1>
    df_climatology.lsl_avg;
    xticks=1:12, # <2>
    title="Monthly Water Level Trends",
    xlabel="Month",
    ylabel="Average Water level",
    linewidth=3, # <3>
    label=false,
)
```

1. Now repeat the analysis, but group by day of the year. What do you notice? (**Hint**: use `Dates.dayofyear` to get the day of the year from a `DateTime` object)

The code here is the same as above, but the grouping is by day of the year instead of month.  The only other difference is that the xticks are now every 20 days instead of every month.

```{julia}
df[!, :dayofyear] = Dates.dayofyear.(df.datetime) 
dropmissing!(df, :lsl) 
df_byday = groupby(df, :dayofyear) 
df_climatology = combine(df_byday, :lsl => mean => :lsl_avg); 
plot(
    df_climatology.dayofyear, # <1>
    df_climatology.lsl_avg;
    xticks=1:20:365, # <2>
    title="Daily Water Level Trends",
    xlabel="Month",
    ylabel="Average Water level",
    linewidth=3, # <3>
    label=false,
)
```


You will notice that the daily water level trends show more variation than the monthly, but they show the same general shape.  This makes sense as the monthly trends can also be thought of as the average of the daily trends.  It shows the importance of thinking critically about the spatial resolution to which you analyze your data!